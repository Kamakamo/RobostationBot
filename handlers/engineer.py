import logging
import re

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

import constants as c
import reminders
import sheets
from config import ENGINEERS_CHAT_ID

from . import helpers

logger = logging.getLogger(__name__)

# --- –î–ò–ê–õ–û–ì –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ò ---


async def start_completion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    request_id = str(query.data.split(c.CB_COMPLETE_PREFIX)[1])
    context.user_data["completing_request_id"] = request_id

    keyboard = [
        [
            InlineKeyboardButton(
                "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞",
                callback_data=f"{c.CB_COMPLETE_REBOOT}{request_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "üìù –î—Ä—É–≥–æ–µ",
                callback_data=f"{c.CB_COMPLETE_OTHER}{request_id}"
            )
        ]
    ]

    await query.edit_message_text(
        text=f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ \\#{helpers.escape_markdown(request_id)}\\.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="MarkdownV2",
    )
    return c.AWAITING_COMMENT


async def complete_with_reboot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    request_id = str(query.data.split(c.CB_COMPLETE_REBOOT)[1])
    comment = "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"

    if sheets.update_request_status(request_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞", comment=comment):
        await query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —Ä–µ—à–µ–Ω–∏–µ–º: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞."
        )

        all_requests = sheets.get_requests_by_status("–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        req_data = next((r for r in all_requests if r["id"] == request_id), None)

        if req_data:
            final_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ \\#{helpers.escape_markdown(request_id)} –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n"
                f"üë∑‚Äç‚ôÇÔ∏è *–ò–Ω–∂–µ–Ω–µ—Ä:* {helpers.escape_markdown(req_data.get('engineer_username', ''))}\n"
                f"üìù *–†–µ—à–µ–Ω–∏–µ:* {helpers.escape_markdown(comment)}"
            )
            await context.bot.send_message(
                chat_id=ENGINEERS_CHAT_ID, text=final_text, parse_mode="MarkdownV2"
            )

        demonstrator_id = context.bot_data.get(f"req_{request_id}_author")
        if demonstrator_id:
            await context.bot.send_message(
                chat_id=demonstrator_id,
                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ \\#{helpers.escape_markdown(request_id)} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!",
                parse_mode="MarkdownV2",
            )

        if f"req_{request_id}_author" in context.bot_data:
            del context.bot_data[f"req_{request_id}_author"]
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminders.cleanup_request_tracking(context, request_id)
    else:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.")

    context.user_data.clear()
    return ConversationHandler.END


async def start_other_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    request_id = str(query.data.split(c.CB_COMPLETE_OTHER)[1])
    context.user_data["completing_request_id"] = request_id

    await query.edit_message_text(
        text=f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ \\#{helpers.escape_markdown(request_id)}\\.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã\\.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel\\.",
        parse_mode="MarkdownV2",
    )
    return c.AWAITING_OTHER_COMMENT


async def save_comment_and_complete(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    user_comment = update.message.text
    request_id = context.user_data.get("completing_request_id")

    if not request_id:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ ID –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–î—Ä—É–≥–æ–µ:" –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    comment = f"–î—Ä—É–≥–æ–µ: {user_comment}"

    if sheets.update_request_status(request_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞", comment=comment):
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –≤–∞—à–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º."
        )

        all_requests = sheets.get_requests_by_status("–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        req_data = next((r for r in all_requests if r["id"] == request_id), None)

        if req_data:
            final_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ \\#{helpers.escape_markdown(request_id)} –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n"
                f"üë∑‚Äç‚ôÇÔ∏è *–ò–Ω–∂–µ–Ω–µ—Ä:* {helpers.escape_markdown(req_data.get('engineer_username', ''))}\n"
                f"üìù *–†–µ—à–µ–Ω–∏–µ:* {helpers.escape_markdown(comment)}"
            )
            await context.bot.send_message(
                chat_id=ENGINEERS_CHAT_ID, text=final_text, parse_mode="MarkdownV2"
            )

        demonstrator_id = context.bot_data.get(f"req_{request_id}_author")
        if demonstrator_id:
            await context.bot.send_message(
                chat_id=demonstrator_id,
                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ \\#{helpers.escape_markdown(request_id)} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!",
                parse_mode="MarkdownV2",
            )

        if f"req_{request_id}_author" in context.bot_data:
            del context.bot_data[f"req_{request_id}_author"]
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminders.cleanup_request_tracking(context, request_id)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.")

    context.user_data.clear()
    return ConversationHandler.END


async def cancel_completion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    request_id = context.user_data.get("completing_request_id")
    await update.message.reply_text(
        f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id} –æ—Ç–º–µ–Ω–µ–Ω–æ. –û–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ '–í —Ä–∞–±–æ—Ç–µ'."
    )
    context.user_data.clear()
    return ConversationHandler.END


# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---


async def claim_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user

    if not helpers.is_engineer(user.id, context):
        await query.answer(
            "–≠—Ç—É –∫–Ω–æ–ø–∫—É –º–æ–≥—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω–∂–µ–Ω–µ—Ä—ã.", show_alert=True
        )
        return

    request_id = str(query.data.split(c.CB_CLAIM_PREFIX)[1])

    if not sheets.is_request_new(request_id):
        await query.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)
        try:
            await query.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        return

    engineer_username_raw = helpers.get_user_mention(user)
    engineer_name_raw = sheets.get_engineer_name_by_id(user.id) or engineer_username_raw

    if not sheets.update_request_status(
        request_id, "–í —Ä–∞–±–æ—Ç–µ", engineer_username_raw, engineer_name_raw
    ):
        await query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.", show_alert=True
        )
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminders.track_request_claim_time(context, request_id, user.id)

    await query.answer(
        "–í—ã –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É! –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    )

    original_text_v2 = query.message.text_markdown_v2
    try:
        header, body = original_text_v2.split("\n\n", 1)
    except ValueError:
        header = ""
        body = original_text_v2

    new_header_in_group = "‚öôÔ∏è *–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ*"
    new_text_in_group = (
        f"{new_header_in_group}\n\n"
        f"{body}\n\n"
        f"üë∑‚Äç‚ôÇÔ∏è *–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É:* {helpers.escape_markdown(engineer_username_raw)}"
    )
    await query.edit_message_text(
        text=new_text_in_group, reply_markup=None, parse_mode="MarkdownV2"
    )

    text_for_pm = (
        f"–í—ã –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É –∑–∞—è–≤–∫—É \\#{helpers.escape_markdown(request_id)}\\.\n\n"
        f"{body}"
    )
    keyboard = [
        [
            InlineKeyboardButton(
                text=f"üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å #{request_id}",
                callback_data=f"{c.CB_COMPLETE_PREFIX}{request_id}",
            )
        ]
    ]

    try:
        await context.bot.send_message(
            chat_id=user.id,
            text=text_for_pm,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="MarkdownV2",
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –∏–Ω–∂–µ–Ω–µ—Ä—É {user.id}: {e}")
        await query.message.reply_text(
            f"{helpers.escape_markdown(engineer_username_raw)}, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\\. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/inprogress` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π\\.",
            parse_mode="MarkdownV2",
        )

    demonstrator_id = context.bot_data.get(f"req_{request_id}_author")
    if demonstrator_id:
        exhibit_match = re.search(r"üèõ \*–≠–∫—Å–ø–æ–Ω–∞—Ç:\* (.+)", query.message.text)
        exhibit_name = exhibit_match.group(1) if exhibit_match else "..."

        await context.bot.send_message(
            chat_id=demonstrator_id,
            text=f"‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä {helpers.escape_markdown(engineer_username_raw)} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –≤–∞—à—É –∑–∞—è–≤–∫—É \\#{helpers.escape_markdown(request_id)} "
            f"–ø–æ —ç–∫—Å–ø–æ–Ω–∞—Ç—É\\.",
            parse_mode="MarkdownV2",
        )


async def show_requests(
    update: Update, context: ContextTypes.DEFAULT_TYPE, status: str
):
    user = update.message.from_user
    if not helpers.is_engineer(user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º.")
        return

    requests = sheets.get_requests_by_status(status)
    if not requests:
        await update.message.reply_text(f"‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´{status}¬ª.")
        return

    await update.message.reply_text(
        f"*{helpers.escape_markdown(f'–ó–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ ¬´{status}¬ª')}:*",
        parse_mode="MarkdownV2",
    )

    user_mention = helpers.get_user_mention(user)
    found_own_request = False

    for req in requests:
        req_id = str(req["id"])
        text = (
            f"üÜî `{helpers.escape_markdown(req_id)}`\n"
            f"üèõ *–≠–∫—Å–ø–æ–Ω–∞—Ç:* {helpers.escape_markdown(req['–≠–∫—Å–ø–æ–Ω–∞—Ç'])}\n"
            f"üë§ *–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–æ—Ä:* {helpers.escape_markdown(req.get('demonstrator_username', 'N/A'))}\n"
            f"üîß *–ü—Ä–æ–±–ª–µ–º–∞:* {helpers.escape_markdown(req.get('–ü—Ä–æ–±–ª–µ–º–∞', '‚Äì'))}"
        )

        keyboard = []
        if status == "–ù–æ–≤–∞—è":
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text=f"‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É #{req_id}",
                        callback_data=f"{c.CB_CLAIM_PREFIX}{req_id}",
                    )
                ]
            )
        elif status == "–í —Ä–∞–±–æ—Ç–µ":
            text += f"\nüë∑‚Äç‚ôÇÔ∏è *–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:* {helpers.escape_markdown(req.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', ''))}"
            if req.get("engineer_username") == user_mention:
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            text=f"üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å #{req_id}",
                            callback_data=f"{c.CB_COMPLETE_PREFIX}{req_id}",
                        )
                    ]
                )
                found_own_request = True

        await update.message.reply_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
            parse_mode="MarkdownV2",
        )

    if status == "–í —Ä–∞–±–æ—Ç–µ" and not found_own_request:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ.")


async def show_new_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_requests(update, context, "–ù–æ–≤–∞—è")


async def show_in_progress_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_requests(update, context, "–í —Ä–∞–±–æ—Ç–µ")


# --- –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú–´–ï –•–ï–ù–î–õ–ï–†–´ ---

claim_handler = CallbackQueryHandler(claim_request, pattern=f"^{c.CB_CLAIM_PREFIX}")
new_requests_handler = CommandHandler("new", show_new_requests)
in_progress_requests_handler = CommandHandler("inprogress", show_in_progress_requests)

completion_conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_completion, pattern=f"^{c.CB_COMPLETE_PREFIX}")
    ],
    states={
        c.AWAITING_COMMENT: [
            CallbackQueryHandler(complete_with_reboot, pattern=f"^{c.CB_COMPLETE_REBOOT}"),
            CallbackQueryHandler(start_other_comment, pattern=f"^{c.CB_COMPLETE_OTHER}"),
        ],
        c.AWAITING_OTHER_COMMENT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, save_comment_and_complete)
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel_completion)],
    per_user=True,
    per_message=False,
    conversation_timeout=1800,
)
