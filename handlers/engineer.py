import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
import sheets
import constants as c
from .helpers import is_engineer, get_user_mention, escape_markdown

logger = logging.getLogger(__name__)

async def claim_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    
    if not is_engineer(user.id, context):
        await query.answer("–≠—Ç—É –∫–Ω–æ–ø–∫—É –º–æ–≥—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω–∂–µ–Ω–µ—Ä—ã.", show_alert=True)
        return

    request_id = query.data.split(c.CB_CLAIM_PREFIX)[1]
    engineer_name_raw = get_user_mention(user)
    engineer_name_escaped = escape_markdown(engineer_name_raw)

    if sheets.update_request_status(request_id, "–í —Ä–∞–±–æ—Ç–µ", engineer_name_raw):
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤
        original_text = query.message.text_markdown_v2_urled
        new_text = original_text.replace("‚ÄºÔ∏è *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "‚öôÔ∏è *–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ")
        new_text += f"\n\nüë∑‚Äç‚ôÇÔ∏è *–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É:* {engineer_name_escaped}"
        keyboard = [[InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"{c.CB_COMPLETE_PREFIX}{request_id}")]]
        
        try:
            await query.edit_message_text(text=new_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='MarkdownV2')
            await query.answer("–í—ã –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (claim_request): {e}")
            await query.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)

        demonstrator_id = context.bot_data.get(f"req_{request_id}_author")
        if demonstrator_id:
            exhibit = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É —ç–∫—Å–ø–æ–Ω–∞—Ç—É"
            if query.message.text:
                lines = query.message.text.split('\n')
                for line in lines:
                    if "–≠–∫—Å–ø–æ–Ω–∞—Ç:" in line:
                        try:
                            exhibit = line.split(':', 1)[1].strip()
                            break
                        except IndexError:
                            continue
            
            exhibit_escaped = escape_markdown(exhibit)
            request_id_escaped = escape_markdown(request_id)

            await context.bot.send_message(
                chat_id=demonstrator_id,
                text=f"‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä {engineer_name_escaped} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –≤–∞—à—É –∑–∞—è–≤–∫—É \\#{request_id_escaped} –ø–æ —ç–∫—Å–ø–æ–Ω–∞—Ç—É ¬´{exhibit_escaped}¬ª\\.",
                parse_mode='MarkdownV2'
            )

async def complete_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    if not is_engineer(user.id, context):
        await query.answer("–≠—Ç—É –∫–Ω–æ–ø–∫—É –º–æ–≥—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω–∂–µ–Ω–µ—Ä—ã.", show_alert=True)
        return
    request_id = query.data.split(c.CB_COMPLETE_PREFIX)[1]
    if sheets.update_request_status(request_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"):
        original_text = query.message.text_markdown_v2_urled
        clean_text = "\n".join(original_text.split('\n')[:-2])
        new_text = clean_text.replace("‚öôÔ∏è *–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ", "‚úÖ *–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        try:
            await query.edit_message_text(text=new_text, reply_markup=None, parse_mode='MarkdownV2')
            await query.answer("–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥-–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (complete_request): {e}")
            await query.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
        demonstrator_id = context.bot_data.get(f"req_{request_id}_author")
        if demonstrator_id:
            text = f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ \\#{escape_markdown(request_id)} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!"
            await context.bot.send_message(chat_id=demonstrator_id, text=text, parse_mode='MarkdownV2')
            if f"req_{request_id}_author" in context.bot_data:
                del context.bot_data[f"req_{request_id}_author"]

async def show_requests(update: Update, context: ContextTypes.DEFAULT_TYPE, status: str):
    if not is_engineer(update.message.from_user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º.")
        return
    try:
        requests = sheets.get_requests_by_status(status)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ sheets: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        return
    if not requests:
        await update.message.reply_text(f"–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'.")
        return
    response_text = f"*–ó–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '{escape_markdown(status)}':*\n\n"
    keyboard = []
    for req in requests:
        response_text += (f"üÜî `{escape_markdown(req['id'])}`\n"
                          f"üèõ *–≠–∫—Å–ø–æ–Ω–∞—Ç:* {escape_markdown(req['exhibit'])}\n"
                          f"üë§ *–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–æ—Ä:* {escape_markdown(req.get('demonstrator_name', 'N/A'))}\n")
        if req.get('engineer_name'):
            response_text += f"üë∑‚Äç‚ôÇÔ∏è *–í —Ä–∞–±–æ—Ç–µ:* {escape_markdown(req['engineer_name'])}\n\n"
        else:
            response_text += "\n"
        if status == "–ù–æ–≤–∞—è":
            keyboard.append([InlineKeyboardButton(text=f"‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É #{req['id']}", callback_data=f"{c.CB_CLAIM_PREFIX}{req['id']}")])
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    try:
        await update.message.reply_text(response_text, reply_markup=reply_markup, parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫.")

async def show_new_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_requests(update, context, "–ù–æ–≤–∞—è")
async def show_in_progress_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_requests(update, context, "–í —Ä–∞–±–æ—Ç–µ")

claim_handler = CallbackQueryHandler(claim_request, pattern=f"^{c.CB_CLAIM_PREFIX}")
complete_handler = CallbackQueryHandler(complete_request, pattern=f"^{c.CB_COMPLETE_PREFIX}")
new_requests_handler = CommandHandler("new", show_new_requests)
in_progress_requests_handler = CommandHandler("inprogress", show_in_progress_requests)