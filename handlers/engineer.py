import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, CallbackQueryHandler, CommandHandler, ConversationHandler, MessageHandler, filters
)
import sheets
import constants as c
from . import helpers
from config import ENGINEERS_CHAT_ID

logger = logging.getLogger(__name__)

async def start_completion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    request_id = str(query.data.split(c.CB_COMPLETE_PREFIX)[1])
    context.user_data['completing_request_id'] = request_id
    await query.edit_message_text(
        text=f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ \\#{helpers.escape_markdown(request_id)}\\.\n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã\\.\n\n"
             "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel\\.",
        parse_mode='MarkdownV2'
    )
    return c.AWAITING_COMMENT

async def save_comment_and_complete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    comment = update.message.text
    request_id = context.user_data.get('completing_request_id')
    if not request_id:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ ID –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END

    if sheets.update_request_status(request_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞", comment=comment):
        await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await helpers.delete_tracked_messages(context, request_id)
        
        all_requests = sheets.get_requests_by_status("–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        req_data = next((r for r in all_requests if r['id'] == request_id), None)
        
        if req_data:
            final_text = (f"‚úÖ *–ó–∞—è–≤–∫–∞ \\#{helpers.escape_markdown(request_id)} –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n"
                          f"üë∑‚Äç‚ôÇÔ∏è *–ò–Ω–∂–µ–Ω–µ—Ä:* {helpers.escape_markdown(req_data.get('engineer_username', ''))}\n"
                          f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {helpers.escape_markdown(comment)}")
            await context.bot.send_message(chat_id=ENGINEERS_CHAT_ID, text=final_text, parse_mode='MarkdownV2')

        demonstrator_id = context.bot_data.get(f"req_{request_id}_author")
        if demonstrator_id:
            await context.bot.send_message(
                chat_id=demonstrator_id,
                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ \\#{helpers.escape_markdown(request_id)} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!",
                parse_mode='MarkdownV2'
            )
        
        if f"req_{request_id}_author" in context.bot_data: del context.bot_data[f"req_{request_id}_author"]
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.")

    context.user_data.clear()
    return ConversationHandler.END

async def cancel_completion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

async def claim_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    if not helpers.is_engineer(user.id, context):
        await query.answer("–≠—Ç—É –∫–Ω–æ–ø–∫—É –º–æ–≥—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω–∂–µ–Ω–µ—Ä—ã.", show_alert=True)
        return
    request_id = str(query.data.split(c.CB_CLAIM_PREFIX)[1])
    if not sheets.is_request_new(request_id):
        await query.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)
        await helpers.delete_tracked_messages(context, request_id)
        return
    engineer_username_raw = helpers.get_user_mention(user)
    engineer_name_raw = sheets.get_engineer_name_by_id(user.id) or engineer_username_raw
    if sheets.update_request_status(request_id, "–í —Ä–∞–±–æ—Ç–µ", engineer_username_raw, engineer_name_raw):
        await query.answer("–í—ã –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É!")
        await helpers.delete_tracked_messages(context, request_id)
        all_requests = sheets.get_requests_by_status("–í —Ä–∞–±–æ—Ç–µ")
        req_data = next((r for r in all_requests if r['id'] == request_id), None)
        if req_data:
            text = (f"‚öôÔ∏è *–ó–∞—è–≤–∫–∞ \\#{helpers.escape_markdown(request_id)} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É*\n"
                    f"üë∑‚Äç‚ôÇÔ∏è *–ò–Ω–∂–µ–Ω–µ—Ä:* {helpers.escape_markdown(engineer_username_raw)} \\({helpers.escape_markdown(engineer_name_raw)}\\)\n"
                    f"üèõ *–≠–∫—Å–ø–æ–Ω–∞—Ç:* {helpers.escape_markdown(req_data['–≠–∫—Å–ø–æ–Ω–∞—Ç'])}")
            await context.bot.send_message(chat_id=ENGINEERS_CHAT_ID, text=text, parse_mode='MarkdownV2')
        demonstrator_id = context.bot_data.get(f"req_{request_id}_author")
        if demonstrator_id and req_data:
            await context.bot.send_message(
                chat_id=demonstrator_id,
                text=f"‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä {helpers.escape_markdown(engineer_name_raw)} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –≤–∞—à—É –∑–∞—è–≤–∫—É \\#{helpers.escape_markdown(request_id)} –ø–æ —ç–∫—Å–ø–æ–Ω–∞—Ç—É ¬´{helpers.escape_markdown(req_data['–≠–∫—Å–ø–æ–Ω–∞—Ç'])}¬ª\\.",
                parse_mode='MarkdownV2'
            )

async def show_requests(update: Update, context: ContextTypes.DEFAULT_TYPE, status: str):
    if not helpers.is_engineer(update.message.from_user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º.")
        return
    requests = sheets.get_requests_by_status(status)
    if not requests:
        await update.message.reply_text(f"–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'.")
        return
    await update.message.reply_text(f"*–ó–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '{helpers.escape_markdown(status)}':*", parse_mode='MarkdownV2')
    for req in requests:
        req_id = str(req['id'])
        text = (f"üÜî `{helpers.escape_markdown(req_id)}`\n"
                f"üèõ *–≠–∫—Å–ø–æ–Ω–∞—Ç:* {helpers.escape_markdown(req['–≠–∫—Å–ø–æ–Ω–∞—Ç'])}\n"
                f"üë§ *–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–æ—Ä:* {helpers.escape_markdown(req.get('demonstrator_username', 'N/A'))}\n")
        keyboard = []
        if status == "–ù–æ–≤–∞—è":
            keyboard.append([InlineKeyboardButton(text=f"‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É #{req_id}", callback_data=f"{c.CB_CLAIM_PREFIX}{req_id}")])
        elif status == "–í —Ä–∞–±–æ—Ç–µ":
             text += f"üë∑‚Äç‚ôÇÔ∏è *–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:* {helpers.escape_markdown(req.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π',''))}"
             keyboard.append([InlineKeyboardButton(text=f"üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å #{req_id}", callback_data=f"{c.CB_COMPLETE_PREFIX}{req_id}")])
        sent_message = await update.message.reply_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
            parse_mode='MarkdownV2'
        )
        helpers.track_request_message(context, req_id, sent_message.chat_id, sent_message.message_id)

async def show_new_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_requests(update, context, "–ù–æ–≤–∞—è")

async def show_in_progress_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_requests(update, context, "–í —Ä–∞–±–æ—Ç–µ")

claim_handler = CallbackQueryHandler(claim_request, pattern=f"^{c.CB_CLAIM_PREFIX}")
new_requests_handler = CommandHandler("new", show_new_requests)
in_progress_requests_handler = CommandHandler("inprogress", show_in_progress_requests)
completion_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_completion, pattern=f"^{c.CB_COMPLETE_PREFIX}")],
    states={
        c.AWAITING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_comment_and_complete)]
    },
    fallbacks=[CommandHandler("cancel", cancel_completion)],
    per_user=True
)