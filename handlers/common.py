import logging
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
import sheets
from config import ADMIN_IDS

logger = logging.getLogger(__name__)

async def update_data_from_sheets(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
    context.bot_data['engineers'] = sheets.get_engineers()
    context.bot_data['content'] = sheets.get_content()
    logger.info(f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ò–Ω–∂–µ–Ω–µ—Ä–æ–≤: {len(context.bot_data.get('engineers',[]))}, –≠–∫—Å–ø–æ–Ω–∞—Ç–æ–≤: {len(context.bot_data.get('content',{}))}")

async def show_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    engineers_count = len(context.bot_data.get('engineers', []))
    content_count = len(context.bot_data.get('content', {}))
    text = (f"**–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\n‚úÖ **–ë–æ—Ç –æ–Ω–ª–∞–π–Ω**\n"
            f"üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets:** {'–£—Å–ø–µ—à–Ω–æ' if sheets.workbook else '–û—à–∏–±–∫–∞'}\n"
            f"üë∑‚Äç‚ôÇÔ∏è **–ò–Ω–∂–µ–Ω–µ—Ä–æ–≤ –≤ –∫—ç—à–µ:** {engineers_count}\n"
            f"üèõÔ∏è **–≠–∫—Å–ø–æ–Ω–∞—Ç–æ–≤ –≤ –∫—ç—à–µ:** {content_count}")
    await update.message.reply_text(text, parse_mode='Markdown')

async def show_my_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    my_requests = sheets.get_requests_by_demonstrator(user_id)
    if not my_requests:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    text = "üîç **–í–∞—à–∏ –∑–∞—è–≤–∫–∏:**\n\n"
    for req in my_requests:
        status_icon = {"–ù–æ–≤–∞—è": "‚ÄºÔ∏è", "–í —Ä–∞–±–æ—Ç–µ": "‚öôÔ∏è", "–ó–∞–≤–µ—Ä—à–µ–Ω–∞": "‚úÖ"}.get(req['status'], "‚ùì")
        text += (f"{status_icon} *#{req['id']}* ({req['status']})\n"
                 f"   –≠–∫—Å–ø–æ–Ω–∞—Ç: {req['exhibit']}\n"
                 f"   –ü—Ä–æ–±–ª–µ–º–∞: {req['problem']}\n\n")
    await update.message.reply_text(text, parse_mode='Markdown')

status_handler = CommandHandler("status", show_status)
my_requests_handler = CommandHandler("myrequests", show_my_requests)