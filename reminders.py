import logging
from datetime import datetime, timedelta
from typing import Dict, List

from telegram.ext import ContextTypes

import sheets
from handlers.helpers import get_user_mention, escape_markdown

logger = logging.getLogger(__name__)


def track_request_claim_time(context: ContextTypes.DEFAULT_TYPE, request_id: str, engineer_id: int):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É"""
    claim_time = datetime.now()
    context.bot_data[f"claim_time_{request_id}"] = {
        "engineer_id": engineer_id,
        "claim_time": claim_time,
        "last_reminder_time": None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    }
    logger.info(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}, –∏–Ω–∂–µ–Ω–µ—Ä {engineer_id}")


def cleanup_request_tracking(context: ContextTypes.DEFAULT_TYPE, request_id: str):
    """–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    key = f"claim_time_{request_id}"
    if key in context.bot_data:
        del context.bot_data[key]
        logger.info(f"–û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")


async def check_and_send_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    current_time = datetime.now()
    reminder_threshold = timedelta(minutes=30)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 1 —á–∞—Å–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ
    in_progress_requests = sheets.get_requests_by_status("–í —Ä–∞–±–æ—Ç–µ")
    
    if not in_progress_requests:
        logger.debug("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return
    
    reminders_sent = 0
    
    for request in in_progress_requests:
        request_id = str(request.get("id", ""))
        if not request_id:
            continue
            
        tracking_key = f"claim_time_{request_id}"
        tracking_data = context.bot_data.get(tracking_key)
        
        if not tracking_data:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            logger.debug(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            continue
            
        engineer_id = tracking_data.get("engineer_id")
        claim_time = tracking_data.get("claim_time")
        last_reminder_time = tracking_data.get("last_reminder_time")
        
        if not engineer_id or not claim_time:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        should_send_reminder = False
        
        if last_reminder_time is None:
            # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 30 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏
            time_since_claim = current_time - claim_time
            if time_since_claim >= reminder_threshold:
                should_send_reminder = True
        else:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 30 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            time_since_last_reminder = current_time - last_reminder_time
            if time_since_last_reminder >= reminder_threshold:
                should_send_reminder = True
        
        if should_send_reminder:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            try:
                exhibit_name = request.get("–≠–∫—Å–ø–æ–Ω–∞—Ç", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                problem = request.get("–ü—Ä–æ–±–ª–µ–º–∞", "")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø–µ—Ä–≤–æ–µ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ
                if last_reminder_time is None:
                    time_text = "–±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
                else:
                    time_since_claim = current_time - claim_time
                    hours = int(time_since_claim.total_seconds() // 3600)
                    minutes = int((time_since_claim.total_seconds() % 3600) // 60)
                    if hours > 0:
                        time_text = f"–±–æ–ª–µ–µ {hours} —á {minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
                    else:
                        time_text = f"–±–æ–ª–µ–µ {minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
                
                reminder_text = (
                    f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ*\n\n"
                    f"–í—ã –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É –∑–∞—è–≤–∫—É \\#{escape_markdown(request_id)} "
                    f"{escape_markdown(time_text)}\\.\n\n"
                    f"üèõ *–≠–∫—Å–ø–æ–Ω–∞—Ç:* {escape_markdown(exhibit_name)}\n"
                    f"üîß *–ü—Ä–æ–±–ª–µ–º–∞:* {escape_markdown(problem)}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã\\!"
                )
                
                await context.bot.send_message(
                    chat_id=engineer_id,
                    text=reminder_text,
                    parse_mode="MarkdownV2"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                context.bot_data[tracking_key]["last_reminder_time"] = current_time
                reminders_sent += 1
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—É {engineer_id} –æ –∑–∞—è–≤–∫–µ {request_id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä—É {engineer_id} –æ –∑–∞—è–≤–∫–µ {request_id}: {e}")
    
    if reminders_sent > 0:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {reminders_sent} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∂–µ–Ω–µ—Ä–∞–º")